import { DuffelResponse, PaginationMeta, Webhooks as WebhooksType, WebhooksCreateParams, WebhooksCreateResponse, WebhooksListDeliveriesParams, WebhooksListDeliveriesResponse, WebhooksListResponse, WebhooksUpdateParams } from '../../types';
import { Resource } from '../../Resource';
import { Client } from '../../Client';
export declare class Webhooks extends Resource {
    /**
     * Endpoint path
     */
    path: string;
    constructor(client: Client);
    /**
     * Trigger a re-delivery of an event to a webhook.
     * @param {string} id - Duffel's unique identifier for the webhook event
     * @link https://duffel.com/docs/api/v1/webhooks/schema#webhooks-retry-delivering-a-webhook-event-url-parameters-id
     */
    redeliver: (id: string) => Promise<DuffelResponse<unknown>>;
    /**
     * Send a ping, a "fake event" notification, to a webhook.
     * @param {string} id - Duffel's unique identifier for the webhook receiver
     */
    ping: (id: string) => Promise<DuffelResponse<unknown>>;
    /**
     * Retrieves a webhook event by its ID.
     * @param {string} id- Duffel's unique identifier for the webhook event
     */
    get: (id: string) => Promise<DuffelResponse<WebhooksType>>;
    /**
     * Retrieve a paginated list of webhook deliveries
     * @param {Object.<WebhooksListDeliveriesParams>} params - Endpoint options
     */
    listDeliveries: ({ ...params }: WebhooksListDeliveriesParams) => Promise<DuffelResponse<WebhooksListDeliveriesResponse[]>>;
    /**
     * Delete a webhook
     * @param {string} id - Duffel's unique identifier for the webhook receiver
     */
    delete: (id: string) => Promise<DuffelResponse<any>>;
    /**
     * Update a webhook
     * @param {string} id - Duffel's unique identifier for the webhook receiver
     */
    update: (id: string, { active, events, url }: WebhooksUpdateParams) => Promise<DuffelResponse<any>>;
    /**
     * Retrieve a paginated list of webhook
     * @param {Object.<PaginationMeta>} params - Endpoint options
     */
    list: ({ ...params }: PaginationMeta) => Promise<DuffelResponse<WebhooksListResponse[]>>;
    /**
     * Create a webhook
     * @param {Object.<WebhooksCreateParams>} params - Endpoint options
     */
    create: ({ events, url, }: WebhooksCreateParams) => Promise<DuffelResponse<WebhooksCreateResponse>>;
}
